// =============== ASSINATURA REAL SIMPLIFICADA ===============
// Usando node-forge no navegador com upload de arquivo .pfx
// SEM PHP, SEM servidor, SEM complica√ß√£o desnecess√°ria

// Log de inicializa√ß√£o do arquivo
console.log('üîÑ assinatura-simples.js carregando...', new Date().toISOString());

console.log('üîê Sistema de assinatura REAL simplificado carregado!');

// Fun√ß√£o principal - SIMPLES e DIRETA
async function assinarXMLComUpload(xml) {
    console.log('üîê Iniciando assinatura com upload de certificado...');
    
    try {
        // 1. Solicitar arquivo .pfx do usu√°rio
        const { pfxData, senha } = await solicitarCertificado();
        
        // 2. Processar certificado com node-forge
        const { certificate, privateKey } = await processarCertificado(pfxData, senha);
        
        // 3. Assinar XML
        const xmlAssinado = await assinarXMLComForge(xml, certificate, privateKey);
        
        console.log('‚úÖ XML assinado com sucesso!');
        return xmlAssinado;
        
    } catch (error) {
        console.error('‚ùå Erro na assinatura:', error);
        throw error;
    }
}

// Solicitar certificado do usu√°rio
function solicitarCertificado() {
    return new Promise((resolve, reject) => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.pfx,.p12';
          input.onchange = async function(event) {
            try {
                const file = event.target.files[0];
                if (!file) throw new Error('Nenhum arquivo selecionado');
                
                console.log('üìÅ Arquivo selecionado:', file.name);
                
                // Ler arquivo como ArrayBuffer
                const pfxData = await file.arrayBuffer();
                
                // Obter senha da configura√ß√£o ou prompt
                let senha = obterSenhaCertificado();
                
                // Fallback: perguntar se n√£o configurado
                if (!senha) {
                    senha = prompt('Digite a senha do certificado:');
                    if (!senha) throw new Error('Senha n√£o informada');
                }
                
                console.log('üîë Senha obtida');
                
                resolve({ pfxData, senha });
                
            } catch (error) {
                reject(error);
            }
        };
        
        input.click();
    });
}

// Obter senha do certificado de forma centralizada
function obterSenhaCertificado() {
    // 1. Tentar localStorage (configura√ß√£o salva)
    const configSalva = localStorage.getItem('nfse-config');
    if (configSalva) {
        try {
            const config = JSON.parse(configSalva);
            if (config.certificado?.senha) {
                console.log('üîë Senha obtida da configura√ß√£o salva');
                return config.certificado.senha;
            }
        } catch (e) {
            console.log('‚ö†Ô∏è Erro ao ler configura√ß√£o salva');
        }
    }
    
    // 2. Usar senha fixa para o certificado pixelvivo.pfx
    const senhaPixelVivo = 'pixel2025';
    console.log('üîë Usando senha padr√£o para pixelvivo.pfx:', senhaPixelVivo);
    return senhaPixelVivo;
}

// Processar certificado com node-forge
async function processarCertificado(pfxData, senha) {
    console.log('üîë Processando certificado com node-forge...');
    console.log('üîë Senha recebida:', senha);
    
    try {
        // Converter para formato node-forge
        const pfxBytes = new Uint8Array(pfxData);
        const pfxBuffer = forge.util.createBuffer(pfxBytes);
        
        console.log('üìÅ Arquivo PKCS#12 carregado, tamanho:', pfxBytes.length);
        
        // Ler PKCS#12 com senha
        console.log('üîì Tentando abrir PKCS#12 com senha...');
        const pfx = forge.pkcs12.pkcs12FromAsn1(
            forge.asn1.fromDer(pfxBuffer), 
            senha
        );
        
        // Extrair certificado
        const certBags = pfx.getBags({ bagType: forge.pki.oids.certBag });
        const certificate = certBags[forge.pki.oids.certBag][0].cert;
          // Extrair chave privada
        const keyBags = pfx.getBags({ 
            bagType: forge.pki.oids.pkcs8ShroudedKeyBag
        });
        const privateKey = keyBags[forge.pki.oids.pkcs8ShroudedKeyBag][0].key;
        
        // Verificar validade
        const agora = new Date();
        if (agora < certificate.validity.notBefore || agora > certificate.validity.notAfter) {
            throw new Error('Certificado expirado ou ainda n√£o v√°lido');
        }
        
        console.log('‚úÖ Certificado processado com sucesso');
        console.log('üìã Titular:', certificate.subject.getField('CN').value);
        console.log('üìã V√°lido at√©:', certificate.validity.notAfter);
        
        return { certificate, privateKey };
        
    } catch (error) {
        throw new Error(`Erro ao processar certificado: ${error.message}`);
    }
}

// Assinar XML usando node-forge
async function assinarXMLComForge(xml, certificate, privateKey) {
    console.log('‚úçÔ∏è Assinando XML com node-forge...');
    
    try {
        // Extrair InfRps para assinatura
        const infRpsMatch = xml.match(/<InfRps[^>]*Id="([^"]*)"[^>]*>([\s\S]*?)<\/InfRps>/);
        if (!infRpsMatch) {
            throw new Error('Tag InfRps com Id n√£o encontrada');
        }
        
        const infRpsId = infRpsMatch[1];
        const infRpsCompleto = infRpsMatch[0];
        
        console.log(`üîç Assinando InfRps com Id: ${infRpsId}`);
          // Canonicalizar para digest conforme C14N (padr√£o XML)
        const xmlCanonicalizado = canonicalizarXML(infRpsCompleto);
        
        // Calcular digest SHA-1 conforme ABRASF
        const md = forge.md.sha1.create();
        md.update(xmlCanonicalizado, 'utf8');
        const digestValue = forge.util.encode64(md.digest().bytes());
          console.log(`üîê XML canonicalizado (tamanho: ${xmlCanonicalizado.length}):`, xmlCanonicalizado.substring(0, 300) + (xmlCanonicalizado.length > 300 ? '...' : ''));
        console.log(`üîê DigestValue (SHA-1): ${digestValue}`);
          // Criar SignedInfo conforme padr√£o ABRASF (com formata√ß√£o espec√≠fica)
        const signedInfo = `<SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
<CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
<SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<Reference URI="#${infRpsId}">
<Transforms>
<Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
</Transforms>
<DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<DigestValue>${digestValue}</DigestValue>
</Reference>
</SignedInfo>`;
          // Canonicalizar SignedInfo conforme C14N
        const signedInfoCanonicalizado = canonicalizarXML(signedInfo);
        
        // Assinar SignedInfo com SHA-1
        const mdSignature = forge.md.sha1.create();
        mdSignature.update(signedInfoCanonicalizado, 'utf8');
        const signature = privateKey.sign(mdSignature);
        const signatureValue = forge.util.encode64(signature);
          console.log(`üîê SignedInfo canonicalizado (tamanho: ${signedInfoCanonicalizado.length}):`, signedInfoCanonicalizado.substring(0, 300) + (signedInfoCanonicalizado.length > 300 ? '...' : ''));
        console.log(`üîê SignatureValue (tamanho: ${signatureValue.length}): ${signatureValue.substring(0, 50)}...`);
        
        // Obter certificado em Base64
        const certDer = forge.asn1.toDer(forge.pki.certificateToAsn1(certificate)).getBytes();
        const certificateValue = forge.util.encode64(certDer);
          // Construir assinatura XMLDSig completa conforme ABRASF
        const xmlSignature = `<Signature xmlns="http://www.w3.org/2000/09/xmldsig#">
${signedInfo}
<SignatureValue>${signatureValue}</SignatureValue>
<KeyInfo>
<X509Data>
<X509Certificate>${certificateValue}</X509Certificate>
</X509Data>
</KeyInfo>
</Signature>`;
          // IMPORTANTE: Inserir assinatura conforme posi√ß√£o exata do ABRASF
        // A assinatura vai no FINAL do elemento Rps (ap√≥s todos os elementos, antes do fechamento)
        let xmlAssinado = xml;
        
        // Procurar o fechamento do RPS que cont√©m este InfRps
        const rpsPattern = new RegExp(`(<Rps[^>]*>[\\s\\S]*?<InfRps[^>]*Id="${infRpsId}"[^>]*>[\\s\\S]*?</InfRps>)([\\s\\S]*?)(</Rps>)`, 'i');
        const rpsMatch = xmlAssinado.match(rpsPattern);
        
        if (rpsMatch) {
            // Inserir assinatura ANTES do fechamento do Rps (posi√ß√£o padr√£o ABRASF)
            xmlAssinado = xmlAssinado.replace(rpsMatch[0], rpsMatch[1] + rpsMatch[2] + '\n' + xmlSignature + '\n' + rpsMatch[3]);
            console.log('‚úÖ Assinatura inserida no FINAL do Rps (posi√ß√£o padr√£o ABRASF)');
        } else {
            // Fallback: inserir dentro do InfRps
            xmlAssinado = xml.replace('</InfRps>', '\n' + xmlSignature + '\n</InfRps>');
            console.log('‚ö†Ô∏è Fallback: Assinatura inserida dentro do InfRps');
        }
          console.log('‚úÖ Assinatura XMLDSig criada conforme padr√£o ABRASF v2.03');
        console.log('üîç DEBUG: Posi√ß√£o da assinatura - DENTRO do Rps, AP√ìS InfRps');
        console.log('üîç DEBUG: Algoritmos utilizados - SHA-1 (digest e signature)');
        console.log('üîç DEBUG: Reference URI aponta para:', `#${infRpsId}`);
        console.log('üîç DEBUG: Namespace XMLDSig:', 'http://www.w3.org/2000/09/xmldsig#');
        
        // Valida√ß√£o adicional da assinatura inserida
        if (xmlAssinado.includes('<Signature xmlns="http://www.w3.org/2000/09/xmldsig#">')) {
            console.log('‚úÖ Assinatura XMLDSig encontrada no XML final');
        } else {
            console.log('‚ùå ERRO: Assinatura XMLDSig N√ÉO encontrada no XML final');
        }
        
        // Log do XML assinado completo para an√°lise
        console.log('üîç DEBUG: XML assinado completo (primeiros 1000 chars):');
        console.log(xmlAssinado.substring(0, 1000));
        console.log('üîç DEBUG: XML assinado completo (√∫ltimos 1000 chars):');
        console.log(xmlAssinado.substring(xmlAssinado.length - 1000));
        
        return xmlAssinado;
        
    } catch (error) {
        throw new Error(`Erro na assinatura: ${error.message}`);
    }
}

// Fun√ß√£o para assinar o lote completo conforme ABRASF v2.03
async function assinarLoteRPS(xmlComRpsAssinados, certificate, privateKey) {
    console.log('‚úçÔ∏è Assinando LOTE de RPS conforme ABRASF...');
    
    try {        // Debug: verificar estrutura do XML
        console.log('üîç DEBUG: Procurando LoteRps com Id no XML...');
        const temLoteRps = xmlComRpsAssinados.includes('<LoteRps');
        const loteRpsTagMatch = xmlComRpsAssinados.match(/<LoteRps[^>]*>/);
        const loteRpsTag = loteRpsTagMatch ? loteRpsTagMatch[0] : null;
        const temId = loteRpsTag && loteRpsTag.includes('Id=');
        
        console.log(`üîç DEBUG: Tem LoteRps: ${temLoteRps}`);
        console.log(`üîç DEBUG: LoteRps tag: ${loteRpsTag}`);
        console.log(`üîç DEBUG: Tem Id: ${temId}`);
          // Extrair LoteRps para assinatura (regex flex√≠vel para qualquer ordem de atributos)
        const loteRpsMatch = xmlComRpsAssinados.match(/<LoteRps[^>]*>([\s\S]*?)<\/LoteRps>/);
        if (!loteRpsMatch) {
            // Mostrar um peda√ßo do XML para debug
            const xmlSnippet = xmlComRpsAssinados.substring(0, 500);
            console.log('üîç DEBUG: XML snippet:', xmlSnippet);
            throw new Error('Tag LoteRps n√£o encontrada');
        }
          // Extrair o Id do LoteRps
        const loteRpsTagForId = xmlComRpsAssinados.match(/<LoteRps[^>]*>/)[0];
        const idMatch = loteRpsTagForId.match(/Id="([^"]*)"/);
        if (!idMatch) {
            throw new Error('Atributo Id n√£o encontrado no LoteRps');
        }
        
        const loteRpsId = idMatch[1];
        const loteRpsCompleto = loteRpsMatch[0];
          console.log(`üîç Assinando LoteRps com Id: ${loteRpsId}`);
        
        // Canonicalizar para digest conforme C14N
        const xmlCanonicalizado = canonicalizarXML(loteRpsCompleto);
        
        // Calcular digest SHA-1
        const md = forge.md.sha1.create();
        md.update(xmlCanonicalizado, 'utf8');
        const digestValue = forge.util.encode64(md.digest().bytes());
        
        console.log(`üîê XML LOTE canonicalizado (tamanho: ${xmlCanonicalizado.length}):`, xmlCanonicalizado.substring(0, 300) + (xmlCanonicalizado.length > 300 ? '...' : ''));
        console.log(`üîê DigestValue do LOTE (SHA-1): ${digestValue}`);
        
        // Criar SignedInfo para o lote
        const signedInfo = `<SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
<CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
<SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<Reference URI="#${loteRpsId}">
<Transforms>
<Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
</Transforms>
<DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<DigestValue>${digestValue}</DigestValue>
</Reference>
</SignedInfo>`;
          // Canonicalizar e assinar SignedInfo conforme C14N
        const signedInfoCanonicalizado = canonicalizarXML(signedInfo);
        const mdSignature = forge.md.sha1.create();
        mdSignature.update(signedInfoCanonicalizado, 'utf8');
        const signature = privateKey.sign(mdSignature);
        const signatureValue = forge.util.encode64(signature);
        
        console.log(`üîê SignedInfo LOTE canonicalizado (tamanho: ${signedInfoCanonicalizado.length}):`, signedInfoCanonicalizado.substring(0, 300) + (signedInfoCanonicalizado.length > 300 ? '...' : ''));
        console.log(`üîê SignatureValue LOTE (tamanho: ${signatureValue.length}): ${signatureValue.substring(0, 50)}...`);
        
        // Obter certificado em Base64
        const certDer = forge.asn1.toDer(forge.pki.certificateToAsn1(certificate)).getBytes();
        const certificateValue = forge.util.encode64(certDer);
        
        // Construir assinatura do lote
        const xmlSignature = `<Signature xmlns="http://www.w3.org/2000/09/xmldsig#">
${signedInfo}
<SignatureValue>${signatureValue}</SignatureValue>
<KeyInfo>
<X509Data>
<X509Certificate>${certificateValue}</X509Certificate>
</X509Data>
</KeyInfo>
</Signature>`;
        
        // Inserir assinatura no lote (antes do fechamento)
        const xmlLoteAssinado = xmlComRpsAssinados.replace('</LoteRps>', xmlSignature + '\n</LoteRps>');
        
        console.log('‚úÖ LOTE assinado conforme padr√£o ABRASF v2.03');
        console.log('üîç DEBUG: Assinatura do LOTE inserida');
        
        return xmlLoteAssinado;
        
    } catch (error) {
        throw new Error(`Erro na assinatura do lote: ${error.message}`);
    }
}

// Fun√ß√£o principal atualizada para seguir o processo ABRASF completo
async function assinarXMLCompleto(xml, forcarUpload = false) {
    console.log('üîê Iniciando processo COMPLETO de assinatura ABRASF...');
    
    try {
        // 0. Limpar XML antes de processar
        const xmlLimpo = limparXMLParaAssinatura(xml);
        
        // 1. Usar certificado da configura√ß√£o (SEMPRE, a menos que for√ßado)
        let pfxData, senha;
        
        if (!forcarUpload) {
            try {
                const resultado = await obterCertificadoDaConfiguracao();
                pfxData = resultado.pfxData;
                senha = resultado.senha;
                console.log('üîë Certificado obtido da configura√ß√£o (pixelvivo.pfx)');
            } catch (error) {
                console.log('‚ö†Ô∏è Erro ao obter certificado da configura√ß√£o:', error.message);
                console.log('üì§ Redirecionando para upload manual...');
                const resultado = await solicitarCertificado();
                pfxData = resultado.pfxData;
                senha = resultado.senha;
            }
        } else {
            console.log('üì§ Upload for√ßado pelo usu√°rio...');
            const resultado = await solicitarCertificado();
            pfxData = resultado.pfxData;
            senha = resultado.senha;
        }
        
        // 2. Processar certificado
        const { certificate, privateKey } = await processarCertificado(pfxData, senha);
        
        // 3. PASSO 1 ABRASF: Assinar cada RPS individualmente
        console.log('üìù PASSO 1: Assinando RPS individualmente...');
        let xmlComRpsAssinados = await assinarXMLComForge(xmlLimpo, certificate, privateKey);// 4. PASSO 2 ABRASF: Verificar se precisa assinar o lote
        if (xmlComRpsAssinados.includes('<LoteRps')) {
            console.log('üìù PASSO 2: Assinando LOTE de RPS...');
            
            // Verificar se LoteRps j√° possui Id (busca mais flex√≠vel)
            const loteRpsTag = xmlComRpsAssinados.match(/<LoteRps[^>]*>/);
            const temId = loteRpsTag && loteRpsTag[0].includes('Id=');
            
            if (!temId) {
                console.log('üîß Adicionando Id ao LoteRps...');
                xmlComRpsAssinados = xmlComRpsAssinados.replace(
                    /<LoteRps([^>]*)>/,
                    '<LoteRps$1 Id="lote1">'
                );
                console.log('‚úÖ Id "lote1" adicionado ao LoteRps');
            } else {
                console.log('‚úÖ LoteRps j√° possui Id');
            }
            
            xmlComRpsAssinados = await assinarLoteRPS(xmlComRpsAssinados, certificate, privateKey);
        }
        
        // 5. Adicionar namespace ABRASF se necess√°rio
        if (!xmlComRpsAssinados.includes('xmlns="http://www.abrasf.org.br/nfse.xsd"')) {
            xmlComRpsAssinados = xmlComRpsAssinados.replace(
                /<EnviarLoteRpsEnvio([^>]*)>/,
                '<EnviarLoteRpsEnvio$1 xmlns="http://www.abrasf.org.br/nfse.xsd">'
            );
        }
          console.log('‚úÖ Processo COMPLETO de assinatura ABRASF finalizado!');
        console.log('üîç DEBUG: XML final com todas as assinaturas:');
        console.log(xmlComRpsAssinados);
        
        // Verificar estrutura final da assinatura
        verificarEstruturaAssinaturaABRASF(xmlComRpsAssinados);
        
        return xmlComRpsAssinados;
        
    } catch (error) {
        console.error('‚ùå Erro no processo completo de assinatura:', error);
        throw error;
    }
}

// Fun√ß√£o para obter certificado da configura√ß√£o
async function obterCertificadoDaConfiguracao() {
    console.log('üîç Tentando obter certificado da configura√ß√£o...');
    
    // Usar o certificado fixo do projeto (pixelvivo.pfx)
    const certificadoUrl = './certificados/pixelvivo.pfx';
    const senha = obterSenhaCertificado();
    
    if (!senha) {
        throw new Error('Senha do certificado n√£o encontrada na configura√ß√£o');
    }
    
    try {
        console.log('üì• Baixando certificado da configura√ß√£o:', certificadoUrl);
        const response = await fetch(certificadoUrl);
        
        if (!response.ok) {
            throw new Error(`Erro ao baixar certificado: ${response.status}`);
        }
        
        const pfxData = await response.arrayBuffer();
        console.log('‚úÖ Certificado obtido da configura√ß√£o');
        
        return { pfxData, senha };
        
    } catch (error) {
        throw new Error(`Erro ao obter certificado da configura√ß√£o: ${error.message}`);
    }
}

// Fun√ß√£o de teste
async function testarAssinaturaSimplificada() {
    const xmlTeste = `<?xml version="1.0" encoding="UTF-8"?>
<EnviarLoteRpsEnvio xmlns="http://www.abrasf.org.br/nfse.xsd">
    <LoteRps versao="2.03">
        <NumeroLote>1</NumeroLote>
        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
        <QuantidadeRps>1</QuantidadeRps>
        <ListaRps>
            <Rps>
                <InfRps Id="rps1">
                    <IdentificacaoRps>
                        <Numero>1</Numero>
                        <Serie>1</Serie>
                        <Tipo>1</Tipo>
                    </IdentificacaoRps>
                    <DataEmissao>2025-06-17</DataEmissao>
                    <Status>1</Status>
                    <Servico>
                        <Valores>
                            <ValorServicos>2500.00</ValorServicos>
                            <Aliquota>0.02</Aliquota>
                            <ValorIss>50.00</ValorIss>
                            <ValorLiquidoNfse>2500.00</ValorLiquidoNfse>
                        </Valores>
                        <ItemListaServico>17.01</ItemListaServico>
                        <CodigoTributacaoMunicipio>170101</CodigoTributacaoMunicipio>
                        <Discriminacao>Desenvolvimento de software personalizado</Discriminacao>
                    </Servico>
                    <Prestador>
                        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
                        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
                    </Prestador>
                    <Tomador>
                        <CpfCnpj><Cnpj>11222333000144</Cnpj></CpfCnpj>
                        <RazaoSocial>Cliente Teste LTDA</RazaoSocial>
                    </Tomador>
                </InfRps>
            </Rps>
        </ListaRps>
    </LoteRps>
</EnviarLoteRpsEnvio>`;
    
    try {
        const resultado = await assinarXMLComUpload(xmlTeste);
        console.log('üß™ Teste conclu√≠do com sucesso!');
        return { sucesso: true, xmlAssinado: resultado };
    } catch (error) {
        console.error('üß™ Teste falhou:', error);
        return { sucesso: false, erro: error.message };
    }
}

// Fun√ß√£o de teste para o processo completo ABRASF
async function testarAssinaturaCompletaABRASF() {
    const xmlTeste = `<?xml version="1.0" encoding="UTF-8"?>
<EnviarLoteRpsEnvio xmlns="http://www.abrasf.org.br/nfse.xsd">
    <LoteRps versao="2.03">
        <NumeroLote>1</NumeroLote>
        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
        <QuantidadeRps>1</QuantidadeRps>
        <ListaRps>
            <Rps>
                <InfRps Id="rps1">
                    <IdentificacaoRps>
                        <Numero>1</Numero>
                        <Serie>1</Serie>
                        <Tipo>1</Tipo>
                    </IdentificacaoRps>
                    <DataEmissao>2025-06-17</DataEmissao>
                    <Status>1</Status>
                    <Servico>
                        <Valores>
                            <ValorServicos>2500.00</ValorServicos>
                            <Aliquota>0.02</Aliquota>
                            <ValorIss>50.00</ValorIss>
                            <ValorLiquidoNfse>2500.00</ValorLiquidoNfse>
                        </Valores>
                        <ItemListaServico>17.01</ItemListaServico>
                        <CodigoTributacaoMunicipio>170101</CodigoTributacaoMunicipio>
                        <Discriminacao>Desenvolvimento de software personalizado</Discriminacao>
                    </Servico>
                    <Prestador>
                        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
                        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
                    </Prestador>
                    <Tomador>
                        <CpfCnpj><Cnpj>11222333000144</Cnpj></CpfCnpj>
                        <RazaoSocial>Cliente Teste LTDA</RazaoSocial>
                    </Tomador>
                </InfRps>
            </Rps>
        </ListaRps>
    </LoteRps>
</EnviarLoteRpsEnvio>`;
    
    try {
        console.log('üß™ Iniciando teste COMPLETO ABRASF...');
        console.log('üìã XML teste ser√° assinado seguindo TODOS os passos ABRASF:');
        console.log('   1. Assinar RPS individualmente');
        console.log('   2. Assinar LOTE de RPS');
        console.log('   3. Verificar namespaces');
        console.log('   4. Validar estrutura final');
        
        const resultado = await assinarXMLCompleto(xmlTeste);
        
        console.log('‚úÖ Teste COMPLETO ABRASF finalizado com sucesso!');
        console.log('üîç Verifica√ß√µes finais:');
        
        // Verificar se cont√©m assinaturas
        const assinaturasRps = (resultado.match(/<Signature xmlns="http:\/\/www\.w3\/2000\/09\/xmldsig#">/g) || []).length;
        console.log(`   ‚úì Assinaturas encontradas: ${assinaturasRps}`);
        
        // Verificar namespace ABRASF
        const temNamespaceABRASF = resultado.includes('xmlns="http://www.abrasf.org.br/nfse.xsd"');
        console.log(`   ‚úì Namespace ABRASF: ${temNamespaceABRASF ? 'SIM' : 'N√ÉO'}`);
        
        // Verificar SHA-1
        const temSHA1 = resultado.includes('xmldsig#sha1');
        console.log(`   ‚úì Algoritmo SHA-1: ${temSHA1 ? 'SIM' : 'N√ÉO'}`);
        
        return { 
            sucesso: true, 
            xmlAssinado: resultado,
            estatisticas: {
                assinaturas: assinaturasRps,
                namespaceABRASF: temNamespaceABRASF,
                algoritmSHA1: temSHA1
            }
        };
        
    } catch (error) {
        console.error('üß™ Teste COMPLETO ABRASF falhou:', error);
        return { 
            sucesso: false, 
            erro: error.message 
        };
    }
}

// Fun√ß√£o de teste usando APENAS o certificado da configura√ß√£o
async function testarAssinaturaCompletaConfiguracao() {
    console.log('üß™ TESTE: Assinatura completa usando APENAS certificado da configura√ß√£o...');
    
    const xmlTeste = `<?xml version="1.0" encoding="UTF-8"?>
<EnviarLoteRpsEnvio xmlns="http://www.abrasf.org.br/nfse.xsd">
    <LoteRps versao="2.03" Id="lote1">
        <NumeroLote>1</NumeroLote>
        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
        <QuantidadeRps>1</QuantidadeRps>
        <ListaRps>
            <Rps>
                <InfRps Id="rps1">
                    <IdentificacaoRps>
                        <Numero>1</Numero>
                        <Serie>1</Serie>
                        <Tipo>1</Tipo>
                    </IdentificacaoRps>
                    <DataEmissao>2025-01-17</DataEmissao>
                    <Status>1</Status>
                    <Servico>
                        <Valores>
                            <ValorServicos>2500.00</ValorServicos>
                            <Aliquota>0.02</Aliquota>
                            <ValorIss>50.00</ValorIss>
                            <ValorLiquidoNfse>2500.00</ValorLiquidoNfse>
                        </Valores>
                        <ItemListaServico>17.01</ItemListaServico>
                        <CodigoTributacaoMunicipio>170101</CodigoTributacaoMunicipio>
                        <Discriminacao>Desenvolvimento de software personalizado</Discriminacao>
                    </Servico>
                    <Prestador>
                        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
                        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
                    </Prestador>
                    <Tomador>
                        <CpfCnpj><Cnpj>11222333000144</Cnpj></CpfCnpj>
                        <RazaoSocial>Cliente Teste LTDA</RazaoSocial>
                    </Tomador>
                </InfRps>
            </Rps>
        </ListaRps>
    </LoteRps>
</EnviarLoteRpsEnvio>`;
    
    try {
        // For√ßar uso do certificado da configura√ß√£o (sem upload)
        const resultado = await assinarXMLCompleto(xmlTeste, false);
        console.log('üß™ ‚úÖ Teste da configura√ß√£o conclu√≠do com sucesso!');
        console.log('üìÑ XML assinado (primeiros 500 chars):', resultado.substring(0, 500));
        return { sucesso: true, xmlAssinado: resultado };
    } catch (error) {
        console.error('üß™ ‚ùå Teste da configura√ß√£o falhou:', error);
        return { sucesso: false, erro: error.message };
    }
}

// Fun√ß√£o de teste simples para verificar carregamento
function testeSimples() {
    console.log('‚úÖ Arquivo assinatura-simples.js carregado e funcionando!');
    console.log('üîç Node-forge dispon√≠vel:', typeof forge);
    return 'Teste OK!';
}

// Fun√ß√£o para limpar XML antes da assinatura (vers√£o mais conservadora)
function limparXMLParaAssinatura(xml) {
    console.log('üßπ Limpeza espec√≠fica para ABRASF...');
    
    // Limpeza espec√≠fica para o padr√£o ABRASF
    let xmlLimpo = xml
        // Remover quebras de linha desnecess√°rias dentro de tags
        .replace(/>\s*\n\s*</g, '><')
        
        // Remover espa√ßos extras entre atributos
        .replace(/\s+=/g, '=')
        .replace(/=\s+/g, '=')
        
        // Normalizar quebras de linha para LF (padr√£o Unix)
        .replace(/\r\n/g, '\n')
        .replace(/\r/g, '\n')
        
        // Remover espa√ßos no final das linhas
        .replace(/[ \t]+$/gm, '')
        
        // Normalizar espa√ßos m√∫ltiplos para um √∫nico espa√ßo
        .replace(/ {2,}/g, ' ')
        
        // Remover linhas completamente vazias
        .replace(/^\s*\n/gm, '')
        
        .trim();
    
    console.log('‚úÖ XML limpo para padr√£o ABRASF');
    return xmlLimpo;
}

// Canonicaliza√ß√£o XML conforme C14N (http://www.w3.org/TR/2001/REC-xml-c14n-20010315)
function canonicalizarXML(xml) {
    console.log('üìê Aplicando canonicaliza√ß√£o C14N...');
    
    // Implementa√ß√£o simplificada do C14N para ABRASF
    let xmlCanonicalizado = xml
        // 1. Normalizar quebras de linha
        .replace(/\r\n/g, '\n')
        .replace(/\r/g, '\n')
        
        // 2. Remover espa√ßos em branco entre tags (preservando conte√∫do de texto)
        .replace(/>\s+</g, '><')
        
        // 3. Normalizar espa√ßos em atributos (um espa√ßo apenas)
        .replace(/\s+=/g, '=')
        .replace(/=\s+/g, '=')
        
        // 4. Remover espa√ßos no in√≠cio e fim
        .trim();
    
    console.log('‚úÖ Canonicaliza√ß√£o C14N aplicada');
    return xmlCanonicalizado;
}

// Fun√ß√£o de verifica√ß√£o da estrutura XML assinado conforme ABRASF
function verificarEstruturaAssinaturaABRASF(xmlAssinado) {
    console.log('üîç Verificando estrutura da assinatura conforme ABRASF...');
    
    const problemas = [];
    
    // 1. Verificar namespace da assinatura
    if (!xmlAssinado.includes('xmlns="http://www.w3.org/2000/09/xmldsig#"')) {
        problemas.push('Namespace XMLDSig ausente ou incorreto');
    }
    
    // 2. Verificar presen√ßa de ambas as assinaturas (RPS e Lote)
    const assinaturas = xmlAssinado.match(/<Signature[^>]*>/g);
    if (!assinaturas || assinaturas.length < 2) {
        problemas.push(`N√∫mero de assinaturas incorreto: encontradas ${assinaturas ? assinaturas.length : 0}, esperadas 2`);
    }
    
    // 3. Verificar algoritmos
    if (!xmlAssinado.includes('rsa-sha1')) {
        problemas.push('Algoritmo de assinatura SHA-1 n√£o encontrado');
    }
    
    // 4. Verificar canonicaliza√ß√£o
    if (!xmlAssinado.includes('http://www.w3.org/TR/2001/REC-xml-c14n-20010315')) {
        problemas.push('Algoritmo de canonicaliza√ß√£o C14N n√£o encontrado');
    }
    
    // 5. Verificar refer√™ncias URI
    const referencias = xmlAssinado.match(/URI="#([^"]+)"/g);
    if (!referencias || referencias.length < 2) {
        problemas.push('Refer√™ncias URI insuficientes');
    }
    
    // 6. Verificar certificado X509
    if (!xmlAssinado.includes('<X509Certificate>') || !xmlAssinado.includes('</X509Certificate>')) {
        problemas.push('Certificado X509 ausente');
    }
    
    if (problemas.length === 0) {
        console.log('‚úÖ Estrutura da assinatura ABRASF est√° correta');
        return true;
    } else {
        console.log('‚ùå Problemas encontrados na estrutura da assinatura:');
        problemas.forEach(problema => console.log(`   ‚Ä¢ ${problema}`));
        return false;
    }
}

// Fun√ß√£o para testar envio DIRETO ao webservice com XML assinado
async function testarEnvioWebserviceConfiguracao() {
    console.log('üåê TESTE: Envio DIRETO ao webservice com XML assinado...');
    
    try {
        // 1. Gerar e assinar XML
        const xmlTeste = `<?xml version="1.0" encoding="UTF-8"?>
<EnviarLoteRpsEnvio xmlns="http://www.abrasf.org.br/nfse.xsd">
    <LoteRps versao="2.03" Id="lote1">
        <NumeroLote>1</NumeroLote>
        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
        <QuantidadeRps>1</QuantidadeRps>
        <ListaRps>
            <Rps>
                <InfRps Id="rps1">
                    <IdentificacaoRps>
                        <Numero>1</Numero>
                        <Serie>1</Serie>
                        <Tipo>1</Tipo>
                    </IdentificacaoRps>
                    <DataEmissao>2025-01-17</DataEmissao>
                    <Status>1</Status>
                    <Servico>
                        <Valores>
                            <ValorServicos>2500.00</ValorServicos>
                            <Aliquota>0.02</Aliquota>
                            <ValorIss>50.00</ValorIss>
                            <ValorLiquidoNfse>2500.00</ValorLiquidoNfse>
                        </Valores>
                        <ItemListaServico>17.01</ItemListaServico>
                        <CodigoTributacaoMunicipio>170101</CodigoTributacaoMunicipio>
                        <Discriminacao>Desenvolvimento de software personalizado</Discriminacao>
                    </Servico>
                    <Prestador>
                        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
                        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
                    </Prestador>
                    <Tomador>
                        <CpfCnpj><Cnpj>11222333000144</Cnpj></CpfCnpj>
                        <RazaoSocial>Cliente Teste LTDA</RazaoSocial>
                    </Tomador>
                </InfRps>
            </Rps>
        </ListaRps>
    </LoteRps>
</EnviarLoteRpsEnvio>`;

        console.log('üîê Assinando XML...');
        const xmlAssinado = await assinarXMLCompleto(xmlTeste, false);
        
        console.log('‚úÖ XML assinado com sucesso!');
        
        // 2. Criar envelope SOAP
        const soapEnvelope = `<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
               xmlns:tns="http://nfse.abrasf.org.br">
  <soap:Body>
    <tns:RecepcionarLoteRps>
      ${xmlAssinado}
    </tns:RecepcionarLoteRps>
  </soap:Body>
</soap:Envelope>`;

        console.log('üìÑ Envelope SOAP criado');
        console.log('üîç Primeiros 500 chars:', soapEnvelope.substring(0, 500));
        
        // 3. Enviar para webservice
        console.log('üì° Enviando para webservice...');
        
        const url = 'https://serem-hml.joaopessoa.pb.gov.br/notafiscal-abrasfv203-ws/NotaFiscalSoap';
        
        try {
            // Testar via proxy
            const proxyResponse = await fetch('https://nfse.mosaicoworkers.workers.dev/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    url: url,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'text/xml; charset=utf-8',
                        'SOAPAction': 'http://nfse.abrasf.org.br/RecepcionarLoteRps'
                    },
                    body: soapEnvelope
                })
            });

            const result = await proxyResponse.json();
            
            console.log('üì• Resposta do webservice:');
            console.log('üîç Status:', result.httpCode);
            console.log('üîç Resposta:', result.response);
            
            return {
                sucesso: result.success,
                httpCode: result.httpCode,
                resposta: result.response,
                xmlAssinado: xmlAssinado
            };
            
        } catch (error) {
            console.error('‚ùå Erro no envio:', error);
            return {
                sucesso: false,
                erro: error.message,
                xmlAssinado: xmlAssinado
            };
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste completo:', error);
        return {
            sucesso: false,
            erro: error.message
        };
    }
}

// NOVA FUN√á√ÉO: Envio direto ao webservice com estrutura correta conforme WSDL
async function testarEnvioDiretoWebservice() {
    console.log('üåê TESTE: Envio DIRETO ao webservice (sem proxy) com estrutura correta...');
    
    try {
        // 1. Gerar e assinar XML
        const xmlTeste = `<?xml version="1.0" encoding="UTF-8"?>
<EnviarLoteRpsEnvio xmlns="http://www.abrasf.org.br/nfse.xsd">
    <LoteRps versao="2.03" Id="lote1">
        <NumeroLote>1</NumeroLote>
        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
        <QuantidadeRps>1</QuantidadeRps>
        <ListaRps>
            <Rps>
                <InfRps Id="rps1">
                    <IdentificacaoRps>
                        <Numero>1</Numero>
                        <Serie>1</Serie>
                        <Tipo>1</Tipo>
                    </IdentificacaoRps>
                    <DataEmissao>2025-01-17</DataEmissao>
                    <Status>1</Status>
                    <Servico>
                        <Valores>
                            <ValorServicos>2500.00</ValorServicos>
                            <Aliquota>0.02</Aliquota>
                            <ValorIss>50.00</ValorIss>
                            <ValorLiquidoNfse>2500.00</ValorLiquidoNfse>
                        </Valores>
                        <ItemListaServico>17.01</ItemListaServico>
                        <CodigoTributacaoMunicipio>170101</CodigoTributacaoMunicipio>
                        <Discriminacao>Desenvolvimento de software personalizado</Discriminacao>
                    </Servico>
                    <Prestador>
                        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
                        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
                    </Prestador>
                    <Tomador>
                        <CpfCnpj><Cnpj>11222333000144</Cnpj></CpfCnpj>
                        <RazaoSocial>Cliente Teste LTDA</RazaoSocial>
                    </Tomador>
                </InfRps>
            </Rps>
        </ListaRps>
    </LoteRps>
</EnviarLoteRpsEnvio>`;

        console.log('üîê Assinando XML...');
        const xmlAssinado = await assinarXMLCompleto(xmlTeste, false);
        
        console.log('‚úÖ XML assinado com sucesso!');
        
        // 2. Criar envelope SOAP CORRETO conforme WSDL
        const soapEnvelope = `<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
               xmlns:tns="http://nfse.abrasf.org.br">
  <soap:Body>
    <tns:RecepcionarLoteRps>
      <tns:EnviarLoteRpsEnvio>
        ${xmlAssinado.replace('<?xml version="1.0" encoding="UTF-8"?>', '')}
      </tns:EnviarLoteRpsEnvio>
    </tns:RecepcionarLoteRps>
  </soap:Body>
</soap:Envelope>`;

        console.log('üìÑ Envelope SOAP CORRETO criado conforme WSDL');
        console.log('üîç Primeiros 800 chars:', soapEnvelope.substring(0, 800));
        
        // 3. URL do webservice (homologa√ß√£o Jo√£o Pessoa)
        const url = 'https://serem-hml.joaopessoa.pb.gov.br/notafiscal-abrasfv203-ws/NotaFiscalSoap';
        
        console.log('üì° Tentando envio DIRETO ao webservice...');
        
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'text/xml; charset=utf-8',
                    'SOAPAction': '"http://nfse.abrasf.org.br/RecepcionarLoteRps"',
                    'Accept': 'text/xml',
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                },
                body: soapEnvelope
            });

            console.log('üìä Status da resposta:', response.status);
            console.log('üìä Headers da resposta:', Object.fromEntries(response.headers.entries()));
            
            const responseText = await response.text();
            console.log('üì• Resposta completa:', responseText);

            if (response.ok) {
                console.log('‚úÖ Envio direto FUNCIONOU!');
                return { success: true, response: responseText };
            } else {
                console.log('‚ùå Erro no envio direto:', response.status, response.statusText);
                return { success: false, error: `HTTP ${response.status}: ${response.statusText}`, response: responseText };
            }

        } catch (fetchError) {
            console.log('‚ùå Erro de fetch (CORS/Network):', fetchError);
            
            // Se deu erro de CORS, tentar com proxy melhorado
            console.log('üîÑ Tentando com proxy aprimorado...');
            return await tentarComProxyAprimorado(soapEnvelope, url);
        }
        
    } catch (error) {
        console.error('‚ùå Erro geral:', error);
        return { success: false, error: error.message };
    }
}

// FUN√á√ÉO DEFINITIVA: Envio com SOAPAction correto (vazio conforme WSDL)
async function testarEnvioComSoapActionCorreto() {
    console.log('üéØ TESTE DEFINITIVO: Envio com SOAPAction CORRETO (vazio conforme WSDL)...');
    
    try {
        // 1. Gerar e assinar XML
        const xmlTeste = `<?xml version="1.0" encoding="UTF-8"?>
<EnviarLoteRpsEnvio xmlns="http://www.abrasf.org.br/nfse.xsd">
    <LoteRps versao="2.03" Id="lote1">
        <NumeroLote>1</NumeroLote>
        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
        <QuantidadeRps>1</QuantidadeRps>
        <ListaRps>
            <Rps>
                <InfRps Id="rps1">
                    <IdentificacaoRps>
                        <Numero>1</Numero>
                        <Serie>1</Serie>
                        <Tipo>1</Tipo>
                    </IdentificacaoRps>
                    <DataEmissao>2025-01-17</DataEmissao>
                    <Status>1</Status>
                    <Servico>
                        <Valores>
                            <ValorServicos>2500.00</ValorServicos>
                            <Aliquota>0.02</Aliquota>
                            <ValorIss>50.00</ValorIss>
                            <ValorLiquidoNfse>2500.00</ValorLiquidoNfse>
                        </Valores>
                        <ItemListaServico>17.01</ItemListaServico>
                        <CodigoTributacaoMunicipio>170101</CodigoTributacaoMunicipio>
                        <Discriminacao>Desenvolvimento de software personalizado</Discriminacao>
                    </Servico>
                    <Prestador>
                        <CpfCnpj><Cnpj>15198135000180</Cnpj></CpfCnpj>
                        <InscricaoMunicipal>122781-5</InscricaoMunicipal>
                    </Prestador>
                    <Tomador>
                        <CpfCnpj><Cnpj>11222333000144</Cnpj></CpfCnpj>
                        <RazaoSocial>Cliente Teste LTDA</RazaoSocial>
                    </Tomador>
                </InfRps>
            </Rps>
        </ListaRps>
    </LoteRps>
</EnviarLoteRpsEnvio>`;

        console.log('üîê Assinando XML...');
        const xmlAssinado = await assinarXMLCompleto(xmlTeste, false);
        
        console.log('‚úÖ XML assinado com sucesso!');
        
        // 2. Criar envelope SOAP CORRETO conforme WSDL
        const soapEnvelope = `<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
               xmlns:tns="http://nfse.abrasf.org.br">
  <soap:Body>
    <tns:RecepcionarLoteRps>
      <tns:EnviarLoteRpsEnvio>
        ${xmlAssinado.replace('<?xml version="1.0" encoding="UTF-8"?>', '')}
      </tns:EnviarLoteRpsEnvio>
    </tns:RecepcionarLoteRps>
  </soap:Body>
</soap:Envelope>`;

        console.log('üìÑ Envelope SOAP com estrutura WSDL correta');
        console.log('üîç Primeiros 600 chars:', soapEnvelope.substring(0, 600));
        
        // 3. URL do webservice
        const url = 'https://serem-hml.joaopessoa.pb.gov.br/notafiscal-abrasfv203-ws/NotaFiscalSoap';
        
        console.log('üì° Enviando com SOAPAction VAZIO (conforme WSDL)...');
        
        try {
            // Headers CORRETOS conforme WSDL
            const headers = {
                'Content-Type': 'text/xml; charset=utf-8',
                'SOAPAction': '""',  // VAZIO conforme WSDL!
                'Accept': 'text/xml'
            };
            
            console.log('üìã Headers enviados:', headers);
            
            const response = await fetch(url, {
                method: 'POST',
                headers: headers,
                body: soapEnvelope
            });

            console.log('üìä Status da resposta:', response.status);
            console.log('üìä Status text:', response.statusText);
            console.log('üìä Headers da resposta:', Object.fromEntries(response.headers.entries()));
            
            const responseText = await response.text();
            console.log('üì• Resposta completa (primeiros 1000 chars):', responseText.substring(0, 1000));

            if (response.ok) {
                console.log('üéâ SUCESSO! Envio com SOAPAction correto FUNCIONOU!');
                
                // Verificar se a resposta cont√©m elementos esperados
                if (responseText.includes('EnviarLoteRpsResposta') || responseText.includes('Protocolo') || responseText.includes('NumeroLote')) {
                    console.log('‚úÖ Resposta cont√©m elementos ABRASF esperados!');
                } else if (responseText.includes('soap:Fault') || responseText.includes('faultstring')) {
                    console.log('‚ö†Ô∏è Resposta cont√©m fault SOAP - verificar detalhes');
                } else {
                    console.log('üìÑ Resposta em formato diferente - analisar conte√∫do');
                }
                
                return { success: true, response: responseText, status: response.status };
            } else {
                console.log('‚ùå Erro HTTP:', response.status, response.statusText);
                console.log('üìÑ Conte√∫do do erro:', responseText);
                return { success: false, error: `HTTP ${response.status}: ${response.statusText}`, response: responseText, status: response.status };
            }

        } catch (fetchError) {
            console.log('‚ùå Erro de fetch (CORS/Network):', fetchError.message);
            
            // Tentar com proxy com headers corretos
            console.log('üîÑ Tentando com proxy usando headers corretos...');
            return await tentarComProxyHeadersCorretos(soapEnvelope, url);
        }
        
    } catch (error) {
        console.error('‚ùå Erro geral:', error);
        return { success: false, error: error.message };
    }
}

// Proxy com headers corretos
async function tentarComProxyHeadersCorretos(soapEnvelope, targetUrl) {
    try {
        console.log('üåê Proxy com headers CORRETOS...');
        
        const proxyResponse = await fetch('https://nfse.mosaicoworkers.workers.dev/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                url: targetUrl,
                method: 'POST',
                headers: {
                    'Content-Type': 'text/xml; charset=utf-8',
                    'SOAPAction': '""',  // VAZIO conforme WSDL!
                    'Accept': 'text/xml',
                    'User-Agent': 'NFSe-ABRASF-Client/2.03'
                },
                body: soapEnvelope
            })
        });

        console.log('üìä Status do proxy:', proxyResponse.status);
        
        if (!proxyResponse.ok) {
            const errorText = await proxyResponse.text();
            console.log('‚ùå Erro do proxy:', errorText);
            throw new Error(`Proxy error: ${proxyResponse.status} - ${errorText}`);
        }

        const result = await proxyResponse.json();
        
        console.log('üì• Resposta via proxy com headers corretos:');
        console.log('üìä Status:', result.status);
        console.log('üìä Headers:', result.headers);
        console.log('üìÑ Body (primeiros 1000 chars):', (result.body || '').substring(0, 1000));

        if (result.status >= 200 && result.status < 300) {
            console.log('üéâ SUCESSO via proxy com headers corretos!');
            
            // Analisar resposta
            const resposta = result.body || '';
            if (resposta.includes('EnviarLoteRpsResposta') || resposta.includes('Protocolo')) {
                console.log('‚úÖ Resposta ABRASF v√°lida recebida!');
            }
            
            return { success: true, response: resposta, status: result.status, via: 'proxy' };
        } else {
            console.log('‚ùå Erro via proxy:', result.status);
            return { success: false, error: `HTTP ${result.status}`, response: result.body, status: result.status, via: 'proxy' };
        }

    } catch (proxyError) {
        console.error('‚ùå Erro no proxy com headers corretos:', proxyError);
        return { success: false, error: `Proxy error: ${proxyError.message}`, via: 'proxy' };
    }
}

// Fun√ß√£o para tentar com proxy aprimorado
async function tentarComProxyAprimorado(soapEnvelope, targetUrl) {
    try {
        console.log('üåê Usando proxy aprimorado...');
        
        const proxyResponse = await fetch('https://nfse.mosaicoworkers.workers.dev/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                url: targetUrl,
                method: 'POST',
                headers: {
                    'Content-Type': 'text/xml; charset=utf-8',
                    'SOAPAction': '"http://nfse.abrasf.org.br/RecepcionarLoteRps"',
                    'Accept': 'text/xml',
                    'User-Agent': 'NFSe-Client/1.0'
                },
                body: soapEnvelope
            })
        });

        console.log('üìä Status do proxy:', proxyResponse.status);
        
        if (!proxyResponse.ok) {
            const errorText = await proxyResponse.text();
            console.log('‚ùå Resposta de erro do proxy:', errorText);
            throw new Error(`Proxy error: ${proxyResponse.status} - ${errorText}`);
        }

        const result = await proxyResponse.json();
        
        console.log('üì• Resposta via proxy:');
        console.log('üìä Status:', result.status);
        console.log('üìä Headers:', result.headers);
        console.log('üìÑ Body:', result.body);

        if (result.status >= 200 && result.status < 300) {
            console.log('‚úÖ Envio via proxy FUNCIONOU!');
            return { success: true, response: result.body, status: result.status };
        } else {
            console.log('‚ùå Erro via proxy:', result.status);
            return { success: false, error: `HTTP ${result.status}`, response: result.body, status: result.status };
        }

    } catch (proxyError) {
        console.error('‚ùå Erro no proxy aprimorado:', proxyError);
        return { success: false, error: `Proxy error: ${proxyError.message}` };
    }
}

// Expor todas as fun√ß√µes necess√°rias
window.assinarXMLComUpload = assinarXMLComUpload;
window.assinarXMLCompleto = assinarXMLCompleto;
window.testarAssinaturaSimplificada = testarAssinaturaSimplificada;
window.testarAssinaturaCompletaABRASF = testarAssinaturaCompletaABRASF;
window.testarAssinaturaCompletaConfiguracao = testarAssinaturaCompletaConfiguracao;
window.testarEnvioWebserviceConfiguracao = testarEnvioWebserviceConfiguracao;
window.testeSimples = testeSimples;
window.limparXMLParaAssinatura = limparXMLParaAssinatura;
window.canonicalizarXML = canonicalizarXML;
window.verificarEstruturaAssinaturaABRASF = verificarEstruturaAssinaturaABRASF;

// Fun√ß√µes de teste
window.testarEnvioDiretoWebservice = testarEnvioDiretoWebservice;
window.tentarComProxyAprimorado = tentarComProxyAprimorado;
window.testarTodasAbordagensEnvio = testarTodasAbordagensEnvio;
window.testarSoapSimples = testarSoapSimples;
window.testarAbrasfPuro = testarAbrasfPuro;
window.enviarParaWebservice = enviarParaWebservice;

// Fun√ß√£o definitiva
window.testarEnvioComSoapActionCorreto = testarEnvioComSoapActionCorreto;
window.tentarComProxyHeadersCorretos = tentarComProxyHeadersCorretos;

console.log('‚úÖ Todas as fun√ß√µes de teste expostas:', {
    testarEnvioComSoapActionCorreto: typeof window.testarEnvioComSoapActionCorreto,
    testarTodasAbordagensEnvio: typeof window.testarTodasAbordagensEnvio,
    testarEnvioDiretoWebservice: typeof window.testarEnvioDiretoWebservice
});
