// Teste final com corre√ß√µes espec√≠ficas para Jo√£o Pessoa
console.log('üéØ TESTE FINAL - CORRE√á√ïES JO√ÉO PESSOA');
console.log('====================================');

async function testeCorrecaoJoaoPessoa() {
    try {
        console.log('\nüîß APLICANDO CORRE√á√ïES ESPEC√çFICAS PARA JO√ÉO PESSOA:');
        console.log('   ‚Ä¢ SignedInfo sem quebras de linha');
        console.log('   ‚Ä¢ Canonicaliza√ß√£o espec√≠fica (remove \\r\\n)');
        console.log('   ‚Ä¢ XML Signature compacto');
        console.log('   ‚Ä¢ Certificado PixelVivo real');
        console.log('');
        
        // 1. Gerar XML com dados PixelVivo
        console.log('1Ô∏è‚É£ Gerando XML com dados PixelVivo...');
        
        if (typeof gerarXMLNFSeABRASF === 'function') {
            const xml = gerarXMLNFSeABRASF();
            console.log('‚úÖ XML gerado (tamanho:', xml.length, 'chars)');
            
            // 2. Aplicar nova assinatura corrigida
            console.log('\n2Ô∏è‚É£ Aplicando assinatura corrigida...');
            
            if (typeof assinarXMLCompleto === 'function') {
                const xmlAssinado = await assinarXMLCompleto(xml);
                console.log('‚úÖ XML assinado com corre√ß√µes espec√≠ficas');
                console.log('üìä Tamanho do XML assinado:', xmlAssinado.length, 'chars');
                
                // 3. Verifica√ß√µes espec√≠ficas
                console.log('\n3Ô∏è‚É£ Verifica√ß√µes espec√≠ficas Jo√£o Pessoa:');
                
                // Verificar se n√£o tem \r\n nas assinaturas
                const temCarriageReturn = xmlAssinado.includes('\\r\\n') || xmlAssinado.includes('\r\n');
                console.log(`üîç Tem \\r\\n: ${temCarriageReturn ? '‚ùå PROBLEMA!' : '‚úÖ OK'}`);
                
                // Verificar estrutura compacta das assinaturas
                const assinaturasComQuebras = (xmlAssinado.match(/<SignedInfo[^>]*>\s*\n/g) || []).length;
                console.log(`üîç SignedInfo com quebras: ${assinaturasComQuebras > 0 ? '‚ùå PROBLEMA!' : '‚úÖ OK'}`);
                
                // Verificar dupla assinatura
                const numAssinaturas = (xmlAssinado.match(/<Signature/g) || []).length;
                console.log(`üîç N√∫mero de assinaturas: ${numAssinaturas} ${numAssinaturas >= 2 ? '‚úÖ' : '‚ùå'}`);
                
                // Verificar posicionamento correto
                const rpsAssinado = xmlAssinado.includes('</InfRps><Signature') || xmlAssinado.includes('</Signature></Rps>');
                const loteAssinado = xmlAssinado.includes('</LoteRps><Signature');
                console.log(`üîç RPS posicionado: ${rpsAssinado ? '‚úÖ' : '‚ùå'}`);
                console.log(`üîç Lote posicionado: ${loteAssinado ? '‚úÖ' : '‚ùå'}`);
                
                // 4. Testar envio com corre√ß√µes
                console.log('\n4Ô∏è‚É£ TESTE DE ENVIO COM CORRE√á√ïES:');
                console.log('üö® Este √© um teste REAL com as corre√ß√µes aplicadas!');
                
                if (typeof enviarNFSeCompleta === 'function') {
                    try {
                        console.log('üì° Enviando XML corrigido para Jo√£o Pessoa...');
                        const resposta = await enviarNFSeCompleta(xmlAssinado);
                        
                        console.log('\nüì• RESPOSTA DO WEBSERVICE:');
                        console.log('========================');
                        console.log(resposta);
                        
                        // An√°lise da resposta
                        if (typeof resposta === 'string') {
                            if (resposta.toLowerCase().includes('erro na assinatura')) {
                                console.log('\n‚ùå AINDA TEMOS ERRO DE ASSINATURA');
                                console.log('üîç Investiga√ß√£o adicional necess√°ria:');
                                console.log('   ‚Ä¢ Poss√≠vel problema de certificado');
                                console.log('   ‚Ä¢ Diferen√ßa na cadeia de certifica√ß√£o');
                                console.log('   ‚Ä¢ Encoding espec√≠fico n√£o tratado');
                                console.log('   ‚Ä¢ Valida√ß√£o de ICP-Brasil');
                                
                                // An√°lise detalhada do XML para debug
                                console.log('\nüî¨ AN√ÅLISE DETALHADA PARA DEBUG:');
                                const primeiraAssinatura = xmlAssinado.match(/<Signature.*?<\/Signature>/s);
                                if (primeiraAssinatura) {
                                    console.log('üìÑ Primeira assinatura (300 chars):', primeiraAssinatura[0].substring(0, 300));
                                }
                                
                            } else if (resposta.includes('<NumeroNfse>') || resposta.toLowerCase().includes('sucesso')) {
                                console.log('\nüéâ SUCESSO! PROBLEMA RESOLVIDO!');
                                console.log('‚úÖ Corre√ß√µes espec√≠ficas para Jo√£o Pessoa funcionaram!');
                                console.log('üèÜ Sistema funcionando corretamente!');
                                
                            } else if (resposta.includes('erro') || resposta.includes('fault')) {
                                console.log('\n‚ö†Ô∏è OUTRO TIPO DE ERRO (n√£o assinatura)');
                                console.log('üìã Progresso: Erro de assinatura foi resolvido!');
                                console.log('üîß Analisar novo erro na resposta acima');
                                
                            } else {
                                console.log('\nüìù RESPOSTA DESCONHECIDA');
                                console.log('üìã Analisar resposta completa acima');
                            }
                        } else {
                            console.log('\nüìù Resposta n√£o √© string - tipo:', typeof resposta);
                        }
                        
                    } catch (erro) {
                        console.log('\n‚ùå ERRO NO ENVIO:');
                        console.log(erro.message);
                    }
                } else {
                    console.log('‚ùå Fun√ß√£o enviarNFSeCompleta n√£o dispon√≠vel');
                }
                
            } else {
                console.log('‚ùå Fun√ß√£o assinarXMLCompleto n√£o dispon√≠vel');
            }
            
        } else {
            console.log('‚ùå Fun√ß√£o gerarXMLNFSeABRASF n√£o dispon√≠vel');
        }
        
        console.log('\nüèÅ TESTE DE CORRE√á√ÉO CONCLU√çDO');
        console.log('==============================');
        console.log('Se ainda houver erro de assinatura, o problema pode ser:');
        console.log('‚Ä¢ Certificado n√£o aceito pela Receita de Jo√£o Pessoa');
        console.log('‚Ä¢ Diferen√ßa sutil na implementa√ß√£o do webservice');
        console.log('‚Ä¢ Necessidade de teste com certificado A3 (HSM)');
        console.log('‚Ä¢ Valida√ß√£o espec√≠fica da cadeia ICP-Brasil');
        
    } catch (erro) {
        console.error('‚ùå Erro no teste de corre√ß√£o:', erro);
    }
}

// Executar teste
console.log('‚è≥ Iniciando teste de corre√ß√£o em 2 segundos...');
setTimeout(testeCorrecaoJoaoPessoa, 2000);
