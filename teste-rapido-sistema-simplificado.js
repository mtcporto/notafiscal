// TESTE R√ÅPIDO DO SISTEMA JO√ÉO PESSOA SIMPLIFICADO
console.log('üß™ TESTE R√ÅPIDO: SISTEMA JO√ÉO PESSOA SIMPLIFICADO');
console.log('================================================');

async function testeRapidoSistemaSimplificado() {
    try {
        console.log('\nüéØ TESTANDO SISTEMA SIMPLIFICADO...');
        
        // Verificar se o sistema est√° carregado
        if (typeof sistemaJoaoPessoa === 'undefined') {
            console.error('‚ùå Sistema Jo√£o Pessoa n√£o carregado');
            return;
        }
        
        console.log('‚úÖ Sistema Jo√£o Pessoa carregado');
        console.log('üìã M√©todos dispon√≠veis:', Object.keys(sistemaJoaoPessoa));
        
        // Testar gera√ß√£o de XML
        console.log('\nüìù TESTE 1: Gera√ß√£o de XML');
        const xml = sistemaJoaoPessoa.gerarXML();
        console.log('‚úÖ XML gerado:', xml.length, 'caracteres');
        console.log('üìÑ In√≠cio do XML:', xml.substring(0, 200));
        
        // Verificar estrutura
        const verificacoes = [
            ['<RecepcionarLoteRps>', xml.includes('<RecepcionarLoteRps>')],
            ['<InfDeclaracaoPrestacaoServico>', xml.includes('<InfDeclaracaoPrestacaoServico>')],
            ['<LoteRps Id=', xml.includes('<LoteRps Id=')],
            ['<CpfCnpj><Cnpj>', xml.includes('<CpfCnpj>\n<Cnpj>') || xml.includes('<CpfCnpj><Cnpj>')],
            ['<Competencia>', xml.includes('<Competencia>')],
            ['<ExigibilidadeISS>', xml.includes('<ExigibilidadeISS>')],
            ['<OptanteSimplesNacional>', xml.includes('<OptanteSimplesNacional>')],
            ['<IncentivoFiscal>', xml.includes('<IncentivoFiscal>')]
        ];
        
        console.log('\nüîç VERIFICA√á√ïES DE ESTRUTURA:');
        verificacoes.forEach(([nome, check]) => {
            console.log(check ? '‚úÖ' : '‚ùå', nome);
        });
        
        // Testar assinatura (se forge estiver dispon√≠vel)
        if (typeof forge !== 'undefined') {
            console.log('\nüîê TESTE 2: Assinatura');
            try {
                const xmlAssinado = await sistemaJoaoPessoa.assinarXML(xml);
                console.log('‚úÖ XML assinado:', xmlAssinado.length, 'caracteres');
                console.log('üîç Tem assinatura:', xmlAssinado.includes('<Signature xmlns="http://www.w3.org/2000/09/xmldsig#">'));
                
                // Verificar posi√ß√£o da assinatura
                const posLoteRps = xmlAssinado.indexOf('</LoteRps>');
                const posSignature = xmlAssinado.indexOf('<Signature');
                console.log('üéØ Assinatura ap√≥s LoteRps:', posSignature > posLoteRps);
                
            } catch (erro) {
                console.log('‚ö†Ô∏è Erro na assinatura (esperado se n√£o tiver certificado):', erro.message);
            }
        } else {
            console.log('\n‚ö†Ô∏è Forge n√£o carregado - teste de assinatura pulado');
        }
        
        console.log('\nüéâ TESTE CONCLU√çDO!');
        console.log('‚úÖ Sistema simplificado funcionando');
        console.log('üöÄ Pr√≥ximo: Testar no fluxo normal');
        
    } catch (erro) {
        console.error('‚ùå Erro no teste:', erro);
    }
}

// Executar teste quando a p√°gina carregar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', testeRapidoSistemaSimplificado);
} else {
    testeRapidoSistemaSimplificado();
}

// Fun√ß√£o para executar via console
window.testeRapidoSistemaSimplificado = testeRapidoSistemaSimplificado;

console.log('\nüìå PARA EXECUTAR MANUALMENTE:');
console.log('Execute: testeRapidoSistemaSimplificado()');
