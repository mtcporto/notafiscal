// Debug espec√≠fico da assinatura para Jo√£o Pessoa
console.log('üîç AN√ÅLISE DETALHADA DA ASSINATURA DIGITAL');
console.log('==========================================');

async function analisarAssinaturaDetalhada() {
    try {
        console.log('\nüéØ INVESTIGANDO O PROBLEMA DE ASSINATURA...');
        
        // 1. Capturar o XML que foi enviado (do √∫ltimo envio)
        console.log('\n1Ô∏è‚É£ Analisando o XML que foi rejeitado...');
        
        // Simular a gera√ß√£o do mesmo XML
        if (typeof gerarXMLNFSeABRASF === 'function') {
            const xmlOriginal = gerarXMLNFSeABRASF();
            console.log('üìÑ XML original gerado (tamanho:', xmlOriginal.length, 'chars)');
            
            // 2. Analisar assinatura atual
            if (typeof assinarXMLCompleto === 'function') {
                const xmlAssinado = await assinarXMLCompleto(xmlOriginal);
                console.log('üìÑ XML assinado (tamanho:', xmlAssinado.length, 'chars)');
                
                // 3. Verifica√ß√µes espec√≠ficas para Jo√£o Pessoa
                console.log('\nüîç VERIFICA√á√ïES ESPEC√çFICAS PARA JO√ÉO PESSOA:');
                
                // Verificar estrutura de assinaturas
                const assinaturas = xmlAssinado.match(/<Signature.*?<\/Signature>/gs) || [];
                console.log(`üìù N√∫mero de assinaturas encontradas: ${assinaturas.length}`);
                
                if (assinaturas.length >= 2) {
                    console.log('‚úÖ Dupla assinatura presente');
                    
                    // Analisar cada assinatura
                    assinaturas.forEach((assinatura, index) => {
                        console.log(`\nüîè ASSINATURA ${index + 1}:`);
                        
                        // Verificar Reference URI
                        const uriMatch = assinatura.match(/URI="([^"]+)"/);
                        const uri = uriMatch ? uriMatch[1] : 'n√£o encontrado';
                        console.log(`üìç URI: ${uri}`);
                        
                        // Verificar algoritmos
                        const sha1Method = assinatura.includes('rsa-sha1');
                        const c14nMethod = assinatura.includes('xml-c14n-20010315');
                        console.log(`üîê SHA-1: ${sha1Method ? '‚úÖ' : '‚ùå'}`);
                        console.log(`üìê C14N: ${c14nMethod ? '‚úÖ' : '‚ùå'}`);
                        
                        // Verificar namespace
                        const xmldsigNS = assinatura.includes('http://www.w3.org/2000/09/xmldsig#');
                        console.log(`üåê XMLDSig namespace: ${xmldsigNS ? '‚úÖ' : '‚ùå'}`);
                        
                        // Verificar se tem certificado
                        const temX509 = assinatura.includes('<X509Certificate>');
                        console.log(`üìú Certificado X509: ${temX509 ? '‚úÖ' : '‚ùå'}`);
                    });
                    
                    // 4. Verifica√ß√µes espec√≠ficas do Jo√£o Pessoa
                    console.log('\nüèõÔ∏è VERIFICA√á√ïES ESPEC√çFICAS JO√ÉO PESSOA:');
                    
                    // Verificar posicionamento das assinaturas
                    const rpsAssinado = xmlAssinado.includes('<Rps><InfRps') && xmlAssinado.includes('</Signature></Rps>');
                    const loteAssinado = xmlAssinado.includes('</LoteRps><Signature');
                    
                    console.log(`üìç RPS assinado corretamente: ${rpsAssinado ? '‚úÖ' : '‚ùå'}`);
                    console.log(`üìç LoteRps assinado corretamente: ${loteAssinado ? '‚úÖ' : '‚ùå'}`);
                    
                    // Verificar IDs
                    const rpsIdMatch = xmlAssinado.match(/InfRps Id="([^"]+)"/);
                    const loteIdMatch = xmlAssinado.match(/LoteRps Id="([^"]+)"/);
                    const rpsId = rpsIdMatch ? rpsIdMatch[1] : null;
                    const loteId = loteIdMatch ? loteIdMatch[1] : null;
                    
                    console.log(`üÜî RPS ID: ${rpsId}`);
                    console.log(`üÜî Lote ID: ${loteId}`);
                    
                    // Verificar se as URIs batem com os IDs
                    const primeiraUri = assinaturas[0].match(/URI="([^"]+)"/)?.[1];
                    const segundaUri = assinaturas[1].match(/URI="([^"]+)"/)?.[1];
                    
                    console.log(`üìç Primeira URI: ${primeiraUri}`);
                    console.log(`üìç Segunda URI: ${segundaUri}`);
                    console.log(`üîó URI RPS bate: ${primeiraUri === '#' + rpsId ? '‚úÖ' : '‚ùå'}`);
                    console.log(`üîó URI Lote bate: ${segundaUri === '#' + loteId ? '‚úÖ' : '‚ùå'}`);
                    
                    // 5. Teste espec√≠fico de canonicaliza√ß√£o
                    console.log('\nüìê TESTE DE CANONICALIZA√á√ÉO:');
                    
                    // Extrair o InfRps para teste
                    const infRpsMatch = xmlAssinado.match(/<InfRps[^>]*>.*?<\/InfRps>/s);
                    if (infRpsMatch) {
                        const infRpsXml = infRpsMatch[0];
                        console.log('üìÑ InfRps encontrado (tamanho:', infRpsXml.length, 'chars)');
                        
                        // Verificar problemas comuns de canonicaliza√ß√£o
                        const temCarriageReturn = infRpsXml.includes('\r');
                        const temTabsOuEspacos = /[\t ]{2,}/.test(infRpsXml);
                        const temQuebrasLinha = infRpsXml.includes('\n');
                        
                        console.log(`üîç Tem \\r: ${temCarriageReturn ? '‚ö†Ô∏è' : '‚úÖ'}`);
                        console.log(`üîç Tem tabs/espa√ßos extras: ${temTabsOuEspacos ? '‚ö†Ô∏è' : '‚úÖ'}`);
                        console.log(`üîç Tem quebras de linha: ${temQuebrasLinha ? '‚ö†Ô∏è' : '‚úÖ'}`);
                        
                        // Teste manual de canonicaliza√ß√£o
                        if (typeof canonicalizarXML === 'function') {
                            const infRpsCanonicalizado = canonicalizarXML(infRpsXml);
                            console.log('üìê InfRps canonicalizado (tamanho:', infRpsCanonicalizado.length, 'chars)');
                            console.log('üìÑ Primeiros 200 chars:', infRpsCanonicalizado.substring(0, 200));
                        }
                    }
                    
                    // 6. An√°lise do envelope SOAP
                    console.log('\nüì¶ AN√ÅLISE DO ENVELOPE SOAP:');
                    
                    const envelope = montarEnvelopeSOAPFinal ? montarEnvelopeSOAPFinal(xmlAssinado) : 'Fun√ß√£o n√£o dispon√≠vel';
                    if (typeof envelope === 'string') {
                        console.log('üìÑ Envelope gerado (tamanho:', envelope.length, 'chars)');
                        
                        // Verificar namespace do envelope
                        const temNamespaceCorreto = envelope.includes('xmlns="http://nfse.abrasf.org.br"');
                        console.log(`üåê Namespace ABRASF: ${temNamespaceCorreto ? '‚úÖ' : '‚ùå'}`);
                        
                        // Verificar estrutura SOAP
                        const temSoapEnvelope = envelope.includes('<soap:Envelope');
                        const temSoapBody = envelope.includes('<soap:Body>');
                        console.log(`üì¶ SOAP Envelope: ${temSoapEnvelope ? '‚úÖ' : '‚ùå'}`);
                        console.log(`üì¶ SOAP Body: ${temSoapBody ? '‚úÖ' : '‚ùå'}`);
                    }
                    
                    console.log('\nüéØ DIAGN√ìSTICO FINAL:');
                    console.log('====================');
                    
                    const problemas = [];
                    
                    if (!rpsAssinado) problemas.push('‚ùå Posicionamento da assinatura RPS');
                    if (!loteAssinado) problemas.push('‚ùå Posicionamento da assinatura Lote');
                    if (primeiraUri !== '#' + rpsId) problemas.push('‚ùå URI da primeira assinatura n√£o bate');
                    if (segundaUri !== '#' + loteId) problemas.push('‚ùå URI da segunda assinatura n√£o bate');
                    
                    if (problemas.length === 0) {
                        console.log('ü§î ESTRUTURA PARECE CORRETA');
                        console.log('üí° Poss√≠veis causas do erro:');
                        console.log('   ‚Ä¢ Problema sutil de canonicaliza√ß√£o');
                        console.log('   ‚Ä¢ Encoding ou charset');
                        console.log('   ‚Ä¢ Certificado n√£o reconhecido pelo √≥rg√£o');
                        console.log('   ‚Ä¢ Diferen√ßa na cadeia de certifica√ß√£o');
                        console.log('');
                        console.log('üîß PR√ìXIMOS PASSOS SUGERIDOS:');
                        console.log('   1. Verificar certificado na ICP-Brasil');
                        console.log('   2. Testar canonicaliza√ß√£o alternativa');
                        console.log('   3. Verificar encoding UTF-8');
                        console.log('   4. Comparar com exemplo oficial');
                    } else {
                        console.log('üîß PROBLEMAS ENCONTRADOS:');
                        problemas.forEach(problema => console.log('   ' + problema));
                    }
                    
                } else {
                    console.log('‚ùå Dupla assinatura n√£o encontrada - este √© o problema!');
                }
                
            } else {
                console.log('‚ùå Fun√ß√£o assinarXMLCompleto n√£o dispon√≠vel');
            }
            
        } else {
            console.log('‚ùå Fun√ß√£o gerarXMLNFSeABRASF n√£o dispon√≠vel');
        }
        
        console.log('\nüèÅ An√°lise conclu√≠da');
        
    } catch (erro) {
        console.error('‚ùå Erro na an√°lise:', erro);
    }
}

// Executar an√°lise
setTimeout(analisarAssinaturaDetalhada, 1000);
